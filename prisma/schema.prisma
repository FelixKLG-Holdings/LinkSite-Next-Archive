generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  steam_id           BigInt   @unique
  discord_id         BigInt?  @unique
  oauth_token_secret String?
  oauth_token        String?
  expires_at         Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  blocked       Boolean   @default(false)
  role          Role      @default(USER)
  image         String?
  accounts      Account[]
  sessions      Session[]
  tickets       Ticket[]
  ticketReplies TicketReplies[]
}

enum Role {
    ADMIN
    DEV
    SUPPORT
    USER
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Ticket {
    id          String      @id @default(cuid())
    state       State       @default(OPEN)
    author      String
    addon       BigInt
    title       String
    description String
    createdAt   DateTime    @default(now())
    latestReply DateTime?
    replies     TicketReplies[]

    user        User    @relation(fields: [author], references: [id])
}

enum State {
    OPEN
    CLOSED
    LOCKED
    HOLD
}

model TicketReplies {
    id          String @id @default(cuid())
    ticketId    String
    author      String
    description String

    ticket      Ticket @relation(fields: [ticketId], references: [id])
    user        User   @relation(fields: [author], references: [id])
}