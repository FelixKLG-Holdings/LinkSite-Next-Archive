generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
    id        String  @id @default(cuid())
    steamId   BigInt  @unique
    user      User?
    discord   Discord?
}

model Discord {
    account     Account @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    accountId   String
    id          BigInt? @unique
    username    String?
    discrim     Int?
    avatar      String?
    token       String
    regenToken  String
    tokenExp    Int
}

model User {
    id                String      @id @default(cuid())
    account           Account     @relation(fields: [AccountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    AccountId         String
    name              String?
    blocked           Boolean     @default(false)
    role              Role        @default(USER)
    image             String?
    tickets           Ticket[]
    ticketReplies     TicketReplies[]
    ticketAttachments TicketAttachments[]
}

enum Role {
    ADMIN
    DEV
    SUPPORT
    USER
}

model Ticket {
    id            String              @id @default(cuid())
    state         State               @default(OPEN)
    hidden        Boolean             @default(false)
    author        String
    user          User                @relation(fields: [author], references: [id], onDelete: Cascade, onUpdate: Cascade)
    addon         String
    title         String
    description   String
    createdAt     DateTime            @default(now())
    latestReply   DateTime?
    replies       TicketReplies[]
    attachments   TicketAttachments[]
}

enum State {
    OPEN
    CLOSED
    LOCKED
    HOLD
}

model TicketReplies {
    id            String  @id @default(cuid())
    ticketId      String
    ticket        Ticket  @relation(fields: [ticketId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    deleted       Boolean @default(false)
    author        String
    user          User    @relation(fields: [author], references: [id], onDelete: Cascade, onUpdate: Cascade)
    description   String
}

model TicketAttachments {
    id        String  @id @default(cuid())
    ticketId  String
    ticket    Ticket  @relation(fields: [ticketId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    author    String
    user      User    @relation(fields: [author], references: [id], onDelete: Cascade, onUpdate: Cascade)
    deleted   Boolean @default(false)
    URL       String
}
